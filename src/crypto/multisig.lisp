;;;; This file is part of monero-tools
;;;; Copyright 2018 Guillaume LE VAILLANT
;;;; Distributed under the GNU GPL v3 or later.
;;;; See the file LICENSE for terms of use and distribution.


(in-package :monero-tools)


(define-constant +multisig-salt+ (map 'octet-vector #'char-code '(#\M #\u #\l #\t #\i #\s #\i #\g
                                                                  #\nul #\nul #\nul #\nul #\nul
                                                                  #\nul #\nul #\nul #\nul #\nul
                                                                  #\nul #\nul #\nul #\nul #\nul
                                                                  #\nul #\nul #\nul #\nul #\nul
                                                                  #\nul #\nul #\nul #\nul))
  :test #'equalp)

(defun compute-multisig-blinded-secret (secret-key)
  (check-type secret-key (octet-vector #.+key-length+))
  (hash-to-scalar (concatenate 'octet-vector secret-key +multisig-salt+)))

(defun compute-multisig-secret-view-key (secret-view-keys)
  "Compute the secret view key of a multi-signature wallet from the
SECRET-VIEW-KEYS of the owners of the wallet."
  (check-type secret-view-keys (vector (octet-vector #.+key-length+)))
  (integer->bytes (reduce (lambda (x y)
                            (mod (+ x y) +l+))
                          (map 'vector #'bytes->integer secret-view-keys))
                  :size +key-length+))

(defun compute-multisig-public-spend-key-n/n (public-spend-keys)
  "Compute the public spend key of a N/N multi-signature wallet from the
PUBLIC-SPEND-KEYS of the owners of the wallet."
  (check-type public-spend-keys (vector (octet-vector #.+key-length+)))
  (point->bytes (reduce #'point+ (map 'vector #'bytes->point public-spend-keys))))

(defun compute-multisig-keys (public-spend-keys secret-spend-key)
  "Compute the keys of a multi-signature wallet from your SECRET-SPEND-KEY and
the PUBLIC-SPEND-KEYS of the other owners of the wallet."
  (check-type public-spend-keys (vector (octet-vector #.+key-length+)))
  (check-type secret-spend-key (octet-vector #.+key-length+))
  (let ((s (bytes->integer secret-spend-key)))
    (map 'vector
         (lambda (x)
           (let ((p (bytes->point x)))
             (hash-to-scalar (point->bytes (point* p s)))))
         public-spend-keys)))

(defun compute-multisig-public-keys (multisig-keys)
  "Compute the public keys of a multi-signature wallet from the MULTISIG-KEYS."
  (check-type multisig-keys (vector (octet-vector #.+key-length+)))
  (map 'vector
       (lambda (x)
         (let ((y (bytes->integer x)))
           (point->bytes (point* +g+ y))))
       multisig-keys))

(defun compute-multisig-public-spend-key (multisig-public-keys)
  "Compute the public spend key of a multi-signature wallet from the
MULTISIG-PUBLIC-KEYS generated by the owners of the wallet."
  (check-type multisig-public-keys (vector (octet-vector #.+key-length+)))
  (let ((unique-keys (remove-duplicates multisig-public-keys :test-not #'mismatch)))
    (point->bytes (reduce #'point+ (map 'vector #'bytes->point unique-keys)))))
